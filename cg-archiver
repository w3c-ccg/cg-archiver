#!/usr/bin/env node
import config from './config.js';
import fs from 'node:fs';
import {
  getRecords, downloadVideo, downloadTranscript, transcriptExists,
  generateSummary, uploadToArchive, emailSummary
} from './lib/google-apps.js';
import moment from 'moment';
import path from 'node:path';
import process from 'process';
import {Command} from 'commander';

// name of the cache file
const CACHE_FILENAME = 'cache.json';

// create the CLI and parse the options
const program = new Command();
program
  .option('-d, --date <YYYY-MM-DD>',
    'Meeting date to process', moment().format('YYYY-MM-DD'))
  .option('-e, --email',
    'Send summary email', false)
  .option('-t, --to <email>',
    'E-mail address to send summary email to', false)
  .option('-u, --upload',
    'Upload to archive server', false)
  .parse(process.argv);
const options = program.opts();

let date = (options.date) ?
  moment(options.date).format('YYYY-MM-DD') : moment().format('YYYY-MM-DD');

// load secrets from the environment
config.geminiApiKey = process.env.GEMINI_API_KEY;
config.archive.privateKey = process.env.ARCHIVE_SSH_KEY;

let meetingsFound = false;
for(let meeting of config.meetings) {
  meeting.slug = meeting.name.toLowerCase().replaceAll(' ', '-');
  // get record for meeting and date
  let record = await getRecords({meeting: meeting.googleMeetId, date});
  if(!record.transcript) {
    continue;
  } else {
    console.log(`Archiving ${meeting.name} meeting for ${date}...`);
    meetingsFound = true;
  }

  // download the video recording
  const videoFilename = path.join(
    config.logDir, `${config.community}-${meeting.slug}-${date}.mp4`);
  if(!fs.existsSync(videoFilename)) {
    const videoStream = fs.createWriteStream(videoFilename);
    await downloadVideo({
      fileStream: videoStream,
      driveLocation: record.recording.driveDestination
    });
  } else {
    console.log('  - Video already downloaded (video/mp4).');
  }

  // upload the video recording to the archive
  if(options.upload && fs.existsSync(videoFilename)) {
    const videoFileStream = fs.createReadStream(videoFilename);
    await uploadToArchive({
      fileStream: videoFileStream,
      filename: path.basename(videoFilename),
      archiveConfig: config.archive
    });
    console.log('  - Uploaded video to archive (video/mp4).');
  }

  // write .log transcript
  const logTranscriptFilename = path.join(config.logDir,
    `${config.community}-${meeting.slug}-${date}.log`);
  if(!fs.existsSync(logTranscriptFilename)) {
    const logFileStream = fs.createWriteStream(logTranscriptFilename);
    await downloadTranscript({
        mediaType: 'text/plain',
        docLocation: record.transcript.docsDestination,
        fileStream: logFileStream
      });
  } else {
    console.log('  - Text transcript already downloaded (text/plain).');
  }

  // upload the .log transcript to the archive
  if(options.upload && fs.existsSync(logTranscriptFilename)) {
    const logFileStream = fs.createReadStream(logTranscriptFilename);
    await uploadToArchive({
      fileStream: logFileStream,
      filename: path.basename(logTranscriptFilename),
      archiveConfig: config.archive
    });
    console.log('  - Uploaded text transcript to archive (text/plain).');
  }

  // write .md transcript
  const mdTranscriptFilename = path.join(config.logDir,
    `${config.community}-${meeting.slug}-${date}.md`);
  if(!fs.existsSync(logTranscriptFilename)) {
    const mdFileStream = fs.createWriteStream(mdTranscriptFilename);
    await downloadTranscript({
      mediaType: 'text/markdown',
      docLocation: record.transcript.docsDestination,
      fileStream: mdFileStream
    });
  } else {
    console.log('  - Text transcript already downloaded (text/markdown).');
  }

  // upload the .md transcript to the archive
  if(options.upload && fs.existsSync(mdTranscriptFilename)) {
    const logFileStream = fs.createReadStream(mdTranscriptFilename);
    await uploadToArchive({
      fileStream: logFileStream,
      filename: path.basename(mdTranscriptFilename),
      archiveConfig: config.archive
    });
    console.log('  - Uploaded text transcript to archive (text/markdown).');
  }

  if(options.email) {
    // get the transcript
    const transcript =
      await transcriptExists({transcriptFilename: mdTranscriptFilename});

    // generate meeting summary
    if(transcript.length > 100) {
      const summary = await generateSummary({config, meeting, date, transcript});

      // email meeting summary
      await emailSummary(
        {config, meeting, email: options.to, date, summary, transcript});
      console.log(`  - Sent email to ${options.to || meeting.email}`);
    } else {
      console.error('Error: Failed to summarize empty transcript.');
    }
  }
}

if(!meetingsFound) {
  console.log(`No meetings to archive found for ${date}.`);
}
