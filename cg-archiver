#!/usr/bin/env node
import config from './config.js';
import fs from 'node:fs';
import { getRecords, downloadVideo, downloadTranscript }
  from './lib/google-meet.js';
import moment from 'moment';
import path from 'node:path';
import process from 'process';
import {Command} from 'commander';

// name of the cache file
const CACHE_FILENAME = 'cache.json';

// create the CLI and parse the options
const program = new Command();
program
  .option('-d, --date <YYYY-MM-DD>', 'Date to process')
  .parse(process.argv);
const options = program.opts();

let date = (options.date) ?
  moment(options.date).format('YYYY-MM-DD') : moment().format('YYYY-MM-DD');

// writes a transcript with a given media type
async function writeTranscript({config, meeting, mediaType, docLocation}) {
  let fileSuffix = 'unknown';

  // set the file suffix
  if(mediaType === 'text/plain') {
    fileSuffix = 'log';
  } else if(mediaType === 'text/markdown') {
    fileSuffix = 'md';
  } else {
    throw Error('Unsupported media type: '+ mediaType);
  }

  let transcriptFile = await downloadTranscript({mediaType, docLocation});

  // write the transcript to disk
  const transcriptFilename = path.join(config.logDir,
    `${config.community}-${meeting.name}-${date}.${fileSuffix}`);
  fs.writeFileSync(transcriptFilename, transcriptFile);
}

for(let meeting of config.meetings) {
  // get record for meeting and date
  let record = await getRecords({meeting: meeting.googleMeetId, date});
  if(!record.transcript) {
    continue;
  } else {
    console.log(`Archiving ${meeting.name} meeting on ${date}...`);
  }

  // download the video recording
  console.log('  - Downloading video recording.');
  let videoFile = await downloadVideo(
    {config, driveLocation: record.recording.driveDestination});

  // write the video recording to disk
  const videoFilename = path.join(config.logDir,
    `${config.community}-${meeting.name}-${date}.mp4`);
  fs.writeFileSync(videoFilename, Buffer.from(await videoFile.arrayBuffer()));


  // download the transcripts
  console.log('  - Downloading transcripts.');
  await writeTranscript({
    config,
    meeting,
    mediaType: 'text/markdown',
    docLocation: record.transcript.docsDestination
  });
  await writeTranscript({
    config,
    meeting,
    mediaType: 'text/plain',
    docLocation: record.transcript.docsDestination
  });

}
